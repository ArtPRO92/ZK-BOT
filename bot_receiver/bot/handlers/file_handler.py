from aiogram import Router, F
from aiogram.types import Message
from bot.tasks import save_request_task
from bot.utils.parser import (
    extract_text_from_docx,
    extract_text_from_pdf,
    extract_text_from_xlsx
)
import aiohttp
from config import CELERY_BROKER

router = Router()

@router.message(F.document)
async def handle_document(message: Message, bot):
    user_id = message.from_user.id
    document = message.document

    # ‚úÖ –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    allowed_extensions = ["docx", "pdf", "txt", "xlsx"]
    file_name = document.file_name or ""
    ext = file_name.split(".")[-1].lower()

      # üîí –ë–ª–æ–∫–∏—Ä—É–µ–º .doc
    if ext == "doc":
        await message.answer("‚ùå –§–∞–π–ª—ã .doc (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç Word) –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ .docx.")
        return

    if ext not in allowed_extensions:
        await message.answer("‚ö†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ .docx, .pdf, .txt –∏ .xlsx —Ñ–∞–π–ª—ã.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
    file = await bot.get_file(document.file_id)
    file_url = f"https://api.telegram.org/file/bot{bot.token}/{file.file_path}"

    async with aiohttp.ClientSession() as session:
        async with session.get(file_url) as response:
            if response.status != 200:
                await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª.")
                return
            content = await response.read()

    print(f"üì• –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª: {file_name}, —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ: {ext}, —Ä–∞–∑–º–µ—Ä: {len(content)} –±–∞–π—Ç")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ —Ç–∏–ø—É
    if ext == "docx":
        extracted_text = extract_text_from_docx(content)
    elif ext == "pdf":
        extracted_text = extract_text_from_pdf(content)
    elif ext == "xlsx":
        extracted_text = extract_text_from_xlsx(content)
    else:
        extracted_text = content.decode("utf-8", errors="ignore")

    print("üìÑ –ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (–Ω–∞—á–∞–ª–æ):", extracted_text[:300])

    if not extracted_text.strip():
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∏–¥–∏—Ç –ª–∏ –±–æ—Ç –±—Ä–æ–∫–µ—Ä
    print(f"üîå CELERY_BROKER –≤ –±–æ—Ç–µ: {CELERY_BROKER}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Celery
    save_request_task.delay(user_id, extracted_text, source_type=ext)
    await message.answer(f"‚úÖ –§–∞–π–ª {file_name} –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
