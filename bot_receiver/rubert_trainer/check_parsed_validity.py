import json
from supabase import create_client
from rubert_trainer.config import SUPABASE_URL, SUPABASE_KEY

supabase = create_client(SUPABASE_URL, SUPABASE_KEY)

def check_parsed():
    print("üì° –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Supabase...")
    data = supabase.table("tz_requests") \
                   .select("id, parsed") \
                   .not_.is_("parsed", "null") \
                   .execute()

    rows = data.data
    print(f"üîç –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(rows)}")

    if not rows:
        print("‚ö†Ô∏è –ù–µ—Ç —Å—Ç—Ä–æ–∫ —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –ø–æ–ª–µ–º parsed.")
        return

    invalid_rows = []

    for row in rows:
        try:
            # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å JSON
            if isinstance(row["parsed"], str):
                json.loads(row["parsed"])
            else:
                json.dumps(row["parsed"])
        except Exception as e:
            invalid_rows.append({"id": row["id"], "error": str(e)})

    if invalid_rows:
        print(f"‚ùå –ù–∞–π–¥–µ–Ω–æ {len(invalid_rows)} –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Å—Ç—Ä–æ–∫:")
        for r in invalid_rows:
            print(f" - ID: {r['id']}, –æ—à–∏–±–∫–∞: {r['error']}")
    else:
        print("‚úÖ –í—Å–µ —Å—Ç—Ä–æ–∫–∏ parsed –≤–∞–ª–∏–¥–Ω—ã–µ.")

if __name__ == "__main__":
    check_parsed()
